For Loops in Python - Tutorial

In Python, a for loop is used for iterating over a sequence (like a list, tuple, dictionary, set, or string). This loop allows you to execute a set of statements once for each item in the sequence. Unlike loops found in some other programming languages, Python's for loop works more like an iterator method as found in other object-oriented programming languages. Here's how you can use for loops effectively in Python.

### Basic Syntax:
The basic syntax of a for loop is:
```python
for item in iterable:
    # code block to execute
```
The `item` can be any variable name that you choose, and `iterable` is any Python object that is iterable.

### Looping Through a List
You can loop through the items of a list as follows:
```python
fruits = ["apple", "banana", "cherry"]
for x in fruits:
    print(x)
```
This will print each fruit in the list.

### Looping Through a String
Strings are iterable, so you can loop through the characters in a string:
```python
for x in "banana":
    print(x)
```

### Using `range()` Function
The `range()` function is often used with loops to generate a sequence of numbers. Here's how you can use it:
```python
for x in range(6):
    print(x)
```
This code will print numbers from 0 to 5.

You can also specify a start value and an increment (step) value:
```python
for x in range(2, 30, 3):
    print(x)
```
This prints numbers from 2 to 29, incrementing by 3.

### The `break` Statement
The `break` statement can be used to stop a loop before it has iterated through all items:
```python
for x in fruits:
    if x == "banana":
        break
    print(x)
```
This will stop the loop when "banana" is encountered.

### The `continue` Statement
The `continue` statement stops the current iteration and moves to the next:
```python
for x in fruits:
    if x == "banana":
        continue
    print(x)
```
This will skip "banana" and continue with the next item.

### Else in For Loop
The `else` block in a for loop is executed when the loop is finished:
```python
for x in range(6):
    print(x)
else:
    print("Finally finished!")
```
The `else` block will not execute if the loop is terminated by a `break`.

### Nested Loops
A loop inside another loop is called a nested loop. Hereâ€™s an example:
```python
adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]
for x in adj:
    for y in fruits:
        print(x, y)
```
This will print each adjective for every fruit.

### Creating Custom Iterables
You can create your own iterables by defining the `__iter__()` and `__next__()` methods:
```python
class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self

    def __next__(self):
        x = self.a
        self.a += 1
        return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
```

### Using `enumerate()`
The `enumerate()` function allows you to loop over an iterable and have an automatic counter:
```python
fruits = ['apple', 'banana', 'cherry']
for index, fruit in enumerate(fruits):
    print(index, fruit)
```

In conclusion, for loops in Python are a powerful tool for iterating over sequences. From lists and strings to custom iterable objects, they provide a flexible way to handle loops in your code.

### Sources:
- [W3Schools on Python For Loops](https://www.w3schools.com/python/python_for_loops.asp)
- [Python Wiki on ForLoop](https://wiki.python.org/moin/ForLoop)
- [GeeksforGeeks on Python For Loops](https://www.geeksforgeeks.org/python-for-loops/)

The YouTube link provided was inaccessible for text content scraping.